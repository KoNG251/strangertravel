<template>

    <div class="p-4 sm:ml-64">
        <div class="p-4 rounded-lg  main">
        <!-- here -->
            <div class="slider mx-auto">
                <div class="mb-4 border-b">
                    <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="default-tab" data-tabs-toggle="#default-tab-content" role="tablist">
                        <li class="me-2" role="presentation">
                            <button class="inline-block p-4 border-b-2 rounded-t-lg" id="detail-tab" data-tabs-target="#detail" type="button" role="tab" aria-controls="detail" aria-selected="false">Hotel details</button>
                        </li>
                        <li class="me-2" role="presentation">
                            <button class="inline-block p-4 border-b-2 rounded-t-lg" id="room-tab" data-tabs-target="#room" type="button" role="tab" aria-controls="room" aria-selected="false">Manage room</button>
                        </li>
                        <li class="me-2">
                            <a :href="addRoom+'?id='+hotelId" class="inline-block p-4 border-b-2 rounded-t-lg cursor-pointer">Add room</a>
                        </li>
                        <li class="me-2">
                            <div class="inline-block p-4 border-b-2 rounded-t-lg cursor-pointer text-red-700" @click="deleteHotel">Delete</div>
                        </li>
                    </ul>
                </div>

                <!-- detail -->
                <div class="hidden" id="detail" role="tabpanel" aria-labelledby="detail-tab">
                    <div class="p-7 rounded-lg border-tab">
                        <form class="grid grid-cols-1 md:grid-cols-2 gap-5" ref="formDetail" @submit.prevent="submitUpdateDetail">
                            <div class="col-span-1 md:col-span-2">
                                <label for="name" class="block text-sm font-medium text-gray-700">Hotel name</label>
                                <input type="text" name="hotel" :value="name" id="name" class="mt-1 focus:ring-blue-800 focus:border-blue-800 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
                            </div>
                            <div class="col-span-1">
                                <label for="province" class="block text-sm font-medium text-gray-700">Province</label>
                                <select name="province" id="province" class="mt-1 focus:ring-blue-800 focus:border-blue-800 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
                                    <option :value="provinceId" selected>{{ province }} (Selected)</option>
                                    <option v-for="item in provinceList" :key="item.id" :value="item.id"> {{ item.name_th }} </option>
                                </select>
                            </div>
                            <div class="col-span-1">
                                <label for="amphures" class="block text-sm font-medium text-gray-700">Amphures</label>
                                <select name="amphures" id="amphures" class="mt-1 focus:ring-blue-800 focus:border-blue-800 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
                                    <option :value="amphures" selected>{{ amphures }} (Selected)</option>
                                    <option v-for="item in amphuresList" :key="item.id" :value="item.name_th"> {{ item.name_th }} </option>
                                </select>
                            </div>
                            <div class="col-span-1 md:col-span-2">
                                <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
                                <textarea :value="address" name="address" id="address" placeholder="address" class="mt-1 focus:ring-blue-800 focus:border-blue-800 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" style="resize: none;">

                                </textarea>
                            </div>
                            <div class="col-span-1 md:col-span-2">
                                <label for="about" class="block text-sm font-medium text-gray-700">About hotel</label>
                                <textarea :value="about" name="about" id="about" placeholder="about hotel" class="mt-1 focus:ring-blue-800 focus:border-blue-800 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md h-56" style="resize: none;">

                                </textarea>
                            </div>
                            <div class="col-span-1 md:col-span-2">
                                <label for="near" class="block text-sm font-medium text-gray-700">Hotel near</label>
                                <div class="grid grid-cols-12 gap-4">
                                    <div class="col-span-10 md:col-span-11">
                                        <input type="text" v-model="near" id="near" class="mt-1 focus:ring-blue-800 focus:border-blue-800 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md">
                                    </div>
                                    <div class="col-span-2 md:col-span-1">
                                        <button type="button" class="mt-1 block w-full shadow-sm sm:text-sm rounded-md btn-submit" style="height:38px;" @click="pushArray">
                                            <i class="fa-solid fa-plus"></i>
                                        </button>
                                    </div>
                                        <div class="col-span-12 flex flex-wrap gap-2">
                                            <span class="bg-blue-500 hover:bg-blue-400 text-white text-xs font-medium me-2 px-2.5 py-0.5 rounded border-gray-500 cursor-pointer" v-for="(item, index) in nearList" :key="index" @click="removeArray(index)">{{item}}</span>
                                        </div>
                                </div>
                            </div>
                            <button type="submit" class="md:col-span-2 btn-submit p-2 rounded-md">SUBMIT</button>
                        </form>
                    </div>
                </div>
                <!-- room -->
                <div class="hidden" id="room" role="tabpanel" aria-labelledby="room-tab">
                    <div class="rounded-lg border-tab">
                        <form class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="rounded-lg shadow-xl w-full h-full p-5" v-for="(room,index) in room" :key="index">
                                <div class="flex gap-4 justify-end w-full">
                                    <div class="text-red-500 cursor-pointer" @click="deleteRoom(room.id)">
                                        <i class="fa-solid fa-trash"></i>
                                    </div>
                                    <a :href="updateRoomRoute+'?id='+room.id+'&hotel='+hotelId">
                                        <i class="fa-solid fa-pen-to-square"></i>
                                    </a>
                                </div>
                                <p class="text-bold text-xl mb-2">Room number : {{ room.numberOfRoom }}</p>
                                <p class="text-base mb-2"><i class="fa-solid fa-coins"></i> Price : {{ room.price }}</p>
                                <p class="text-base mb-2"><i class="fa-solid fa-bed"></i> Number of bed : {{ room.numberOfBed }}</p>
                                <p class="text-base mb-2"><i class="fa-solid fa-check"></i> Facilities</p>
                                <div class="w-full flex flex-wrap gap-2">
                                    <span class="bg-blue-500 text-white text-xs font-medium me-2 px-2.5 py-0.5 rounded" v-for="item in room.facilities.facilitie">{{ item }}</span>
                                </div>

                            </div>
                        </form>
                    </div>
                </div>

            </div>
        </div>
    </div>


    </template>

    <script>
    import moment from 'moment';
    import axios from 'axios';
    import Notiflix from 'notiflix';
    import Swal from 'sweetalert2'
    import 'vue3-carousel/dist/carousel.css'
    import { Carousel, Slide, Pagination, Navigation } from 'vue3-carousel'


        export default {
            components: {
                Carousel,
                Slide,
                Pagination,
                Navigation,
            },
            data(){

                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);
                const id = urlParams.get('id')

                return  {

                    hotels: null,
                    photo: [],
                    name: '',
                    province: '',
                    amphures: '',
                    address: '',
                    about: '',
                    nearList: [],
                    provinceList: [],
                    amphuresList: [],
                    provinceId : null,
                    amphuresId : null,
                    near:'',
                    room: '',
                    hotelId: id

                }
            },
            props:{
                logoPrimary: String,
                logoutRoute: String,
                indexRoute: String,
                addHotelRoute: String,
                pictureHotelRoute: String,
                itemArray: String,
                provinceRoute: String,
                amphuresRoute: String,
                updateRoute: String,
                csrfToken: String,
                roomArray: String,
                updateRoomRoute: String,
                addRoom: String,
                deleteHotelRoute: String,
                deleteRoomRoute: String

            },
            async mounted(){
                try {

                        this.hotels = this.itemArray.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
                        this.hotels = JSON.parse(this.hotels)
                        this.hotels.forEach((hotel) => {
                            this.name = hotel.hotelName
                            this.province = hotel.province
                            this.amphures = hotel.amphures
                            this.address = hotel.address
                            this.about = hotel.about
                            this.nearList = hotel.near
                            const urls = hotel.photos.split(',').map(photo => this.pictureHotelRoute+'/'+ photo.trim());
                            this.photo = [...this.photo, ...urls.map(url => ({ imageUrl: url }))];
                        });

                        this.room = JSON.parse(this.roomArray)



                        axios.get(this.provinceRoute).then(res => {
                            this.provinceList = res.data;
                            this.provinceId = res.data.find(item => item.name_th === this.province);
                            this.provinceId = this.provinceId.id
                        });

                        axios.get(this.amphuresRoute).then(res => {
                            this.amphuresList = res.data;
                            this.amphuresId = res.data.find(item => item.name_th === this.amphures);
                            this.amphuresId = this.amphuresId.id;
                        });

                } catch (error) {
                    console.error('Error:', error);
                }

            },
            methods: {
                logout(){
                    Swal.fire({
                        title: "Are you sure?",
                        text: "Do you want to logout?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Logout"
                        }).then((result) => {
                        if (result.isConfirmed) {
                            axios.post(this.logoutRoute,
                                {
                                    headers: {
                                    'X-CSRF-TOKEN': this.csrfToken
                                    }
                                }).then(res => {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success!',
                                        text: 'Logout seccess',
                                    }).then(() => {
                                        localStorage.clear();
                                        this.userPicture = 'null';
                                        window.location = this.indexRoute;
                                    });
                                });
                        }
                    });
                },
                pushArray(){
                    if(this.near != "" || this.near == null){
                        this.nearList.push(this.near);
                        this.near = '';
                    }
                },
                removeArray(index){
                    this.nearList.splice(index, 1);
                },
                submitUpdateDetail(){
                    const formData = new FormData(this.$refs.formDetail);

                    const selectElement = document.getElementById('province');
                    const selectedValue = selectElement.value;
                    formData.append('province', selectedValue);


                    const data = {};
                    formData.forEach((value, key) => {
                        data[key] = value;
                    });

                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);
                    const id = urlParams.get('id')


                    axios.post(this.updateRoute,
                        {
                            data: data,
                            id: id,
                            near: this.nearList
                        },
                        {
                            headers: {
                                'Content-Type': 'multipart/form-data',
                                'X-CSRF-TOKEN': this.csrfToken
                            }
                        }
                    ).then(response => {
                        Notiflix.Notify.success('updated successfully')
                    }).catch(error => {
                        console.log(error)
                    });
                },
                deleteHotel(){

                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);
                    const id = urlParams.get('id')

                    Notiflix.Confirm.show(
                        'Delete',
                        'Do you want to delete this hotel?',
                        'Delete',
                        'Cancel',
                        () => {
                            axios.post(this.deleteHotelRoute,
                                {
                                    id: id
                                },
                                {
                                    headers: {
                                        'Content-Type': 'multipart/form-data',
                                        'X-CSRF-TOKEN': this.csrfToken
                                    }
                                }
                            ).then(response => {
                                Notiflix.Report.success(
                                    'ADD SUCCESS',
                                    'you just add hotel successfully!',
                                    'okay',
                                    ()=>{
                                        window.location = this.indexRoute;
                                    }
                                )

                            })
                        },
                        () => {

                        }
                    );
                },
                deleteRoom(room){
                    Notiflix.Confirm.show(
                        'Delete',
                        'Do you want to delete this room?',
                        'Delete',
                        'Cancel',
                        ()=>{
                            axios.post(this.deleteRoomRoute,
                                {
                                   id: room,
                                   hotel : this.hotelId
                                },
                                {
                                    headers: {
                                        'Content-Type': 'multipart/form-data',
                                        'X-CSRF-TOKEN': this.csrfToken
                                    }
                                }
                            ).then(res => {
                                Notiflix.Report.success(
                                    'SUCCESS',
                                    'Delete room success',
                                    'Okay',
                                    () => {
                                        window.location.reload();
                                    }
                                );
                            }).catch(error => {
                                Notiflix.Report.failure(
                                    "Fail",
                                    error.response.data.message,
                                    'Okay'
                                )
                            });
                        }

                    )
                }

            },
            watch: {

            },
            computed: {
                filteredItems() {
                    return this.amphuresList.filter(item => item.province_id == this.province);
                }
            }
        }
    </script>

